@startuml
autonumber

skinparam sequence {
	ArrowColor blue

	LifeLineBorderColor blue
	LifeLineBackgroundColor #A9DCDF

	ParticipantBorderColor blue
	ParticipantBackgroundColor #A9DCDF
	ParticipantFontColor black

	ActorBorderColor blue
	ActorBackgroundColor #A9DCDF
}

<style>
	.request * {
		BackgroundColor #fcf0ff
		FontColor Black
		RoundCorner 10
	}
	.success * {
		BackgroundColor #90ee90
		FontColor Black
		RoundCorner 10
	}
</style>

title Пример пошаговой обработки запроса от пользователя

Customer -> UIChatApp : Отправляет сообщение 
Note <<request>> right of Customer: "Какая средняя успеваемость и\nпосещаемость студентов третьего курса\nпо всем предметам в последнем семестре с задолжностью по оплате?"
activate Customer
activate UIChatApp
UIChatApp -> AIOrchestrator : Отправляет запрос в виде текстового сообщения
activate AIOrchestrator
AIOrchestrator -> AIOrchestrator : Обрабатывает запрос и определяет необходимые AI-агенты

Note right of AIOrchestrator: Есть следующие микросервисы:\n1. Студенты. Работает со следующими данными:\n1.1. Students - список студентов\nДругих данных в микросервисе нет\n2. Касса. Работает со следующими данными:\n2.1. Transactions - список транзакции студентов\nДругих данных в микросервисе нет\n3. Успеваемость. Работает со следующими данными:\n3.1. Subjects - список предметов\n3.2. Marks - список оценок студентов по предметам\nДругих данных в микросервисе нет\n4. Посещаемость. Работает со следующими данными:\n4.1. Subjects - список предметов\n4.2 Attendance - список посещений студентов по предметам\nДругих данных в микросервисе нет\nОграничения:\n1. Других микросервисов нет\n2. Новые микросервисы создавать нельзя\n3. Надо использовать только имеющиеся микросервисы\n4. Каждый микросервис работает только с определенным списком таблиц\nТебе приходит запрос: «Какая средняя успеваемость и посещаемость студентов третьего курса по всем предметам за последний семестр с задолженностью по оплате»\nЗадача:\nСформируй отдельные задачи для получения данных из этих микросервисов для формирования ответа на этот запрос.\nШаги расписывать не надо.\nПришли ответ в формате JSON. \nВ JSON укажи:\n1. Название микросервиса \n2. Текст задания\nВ ответе пришли только технический JSON.
activate AIAgent
Note <<success>> right of AIOrchestrator: [\n{\n"microservice": "Студенты",\n"task": "Получить список студентов третьего курса"\n},\n{\n"microservice": "Касса",\n"task": "Получить список транзакций студентов третьего курса и определить студентов с задолженностью по оплате"\n},\n{\n"microservice": "Успеваемость",\n"task": "Получить оценки студентов третьего курса по всем предметам за последний семестр"\n},\n{\n"microservice": "Посещаемость",\n"task": "Получить посещаемость студентов третьего курса по всем предметам за последний семестр"\n}\n]
AIOrchestrator -> AIAgent: Отправляет запросы
AIAgent -> RAG: Отправляет запрос
activate RAG
RAG -> RAG: Формирует SQL запрос


Note right of RAG: Напиши SQL запрос в БД PostgreSQL.\nСтруктура таблиц:\n1. Students (id, name, course)\nДругих таблиц в БД нет, поэтому новые таблицы не придумывай. Скажи об этом, если неоткуда достать данные.\nЗадача: Получить список студентов третьего курса.\nНапиши ответ только в формате SQL запроса со всеми выходными данными из всех таблиц.
Note <<success>> right of RAG: SELECT * \nFROM Students \nWHERE course = 3;
RAG -> SQLStorage: Обращается к БД с запросом
activate SQLStorage
SQLStorage --> RAG: Ответ
deactivate SQLStorage
RAG --> AIAgent: Ответ
AIAgent --> AIOrchestrator: Ответ

Note right of RAG: Напиши SQL запрос в БД PostgreSQL.\nСтруктура таблиц:\n1. Transactions (id, student_id, amount)\nДругих таблиц в БД нет, поэтому новые таблицы не придумывай. Скажи об этом, если неоткуда достать данные.\nЗадача: Получить список транзакций студентов третьего курса и определить студентов с задолженностью по оплате.\nInclude:\n1. JSON из  микросервиса "Студенты".\nНапиши ответ только в формате SQL запроса.
Note <<success>> right of RAG: WITH Students AS (\nSELECT * FROM jsonb_to_recordset(\n'[{"id": 1, "name": "Alice", "course": 3},\n{"id": 2, "name": "Bob", "course": 2},\n{"id": 3, "name": "Charlie", "course": 3}]'\n) AS s(id INT, name TEXT, course INT)\n)\nSELECT t.id AS transaction_id, t.student_id, t.amount, s.name, s.course\nFROM Transactions t\nJOIN Students s ON t.student_id = s.id\nWHERE s.course = 3;
RAG -> SQLStorage: Обращается к БД с запросом
activate SQLStorage
SQLStorage --> RAG: Ответ
deactivate SQLStorage
RAG --> AIAgent: Ответ
AIAgent --> AIOrchestrator: Ответ

Note right of RAG: Напиши SQL запрос в БД PostgreSQL.\nСтруктура таблиц:\n1. Subjects (id, subject_name)\n2. Marks (student_id, subject_id, semester, mark)\nДругих таблиц в БД нет, поэтому новые таблицы не придумывай. Скажи об этом, если неоткуда достать данные.\nЗадача: Получить оценки студентов третьего курса по всем предметам за последний семестр.\nInclude:\n1. JSON из микросервиса "Студенты";\n2. JSON из микросервиса "Касса".\nНапиши ответ только в формате SQL запроса.
Note <<success>> right of RAG: WITH Students AS (\nSELECT * FROM jsonb_to_recordset(\n'[{"id": 1, "name": "Alice", "course": 3},\n{"id": 2, "name": "Bob", "course": 2},\n{"id": 3, "name": "Charlie", "course": 3}]'\n) AS s(id INT, name TEXT, course INT)\n),\nLastSemester AS (\nSELECT MAX(semester) AS last_semester\nFROM Marks\n)\nSELECT m.student_id, s.name, m.subject_id, sub.subject_name, m.semester, m.mark\nFROM Marks m\nJOIN LastSemester ls ON m.semester = ls.last_semester\nJOIN Students s ON m.student_id = s.id\nJOIN Subjects sub ON m.subject_id = sub.id\nWHERE s.course = 3;
RAG -> SQLStorage: Обращается к БД с запросом
activate SQLStorage
SQLStorage --> RAG: Ответ
deactivate SQLStorage
RAG --> AIAgent: Ответ
AIAgent --> AIOrchestrator: Ответ

Note right of RAG: Напиши SQL запрос в БД PostgreSQL.\nСтруктура таблиц:\n1. Subjects (id, subject_name)\n2. Attendance (student_id, subject_id, semester, attendance_status)\nДругих таблиц в БД нет, поэтому новые таблицы не придумывай. Скажи об этом, если неоткуда достать данные.\nЗадача: Получить посещаемость студентов третьего курса по всем предметам за последний семестр.\nInclude: \n1. JSON из микросервиса "Студенты";\n2. JSON из микросервиса "Касса";\n3. JSON из микросервиса "Успеваемость".\nНапиши ответ только в формате SQL запроса.
Note <<success>> right of RAG: WITH Students AS (\nSELECT * FROM jsonb_to_recordset(\n'[{"id": 1, "name": "Alice", "course": 3},\n{"id": 2, "name": "Bob", "course": 2},\n{"id": 3, "name": "Charlie", "course": 3}]'\n) AS s(id INT, name TEXT, course INT)\n),\nLastSemester AS (\nSELECT MAX(semester) AS last_semester\nFROM Attendance\n)\nSELECT a.student_id, s.name, a.subject_id, sub.subject_name, a.semester, a.attendance_status\nFROM Attendance a\nJOIN LastSemester ls ON a.semester = ls.last_semester\nJOIN Students s ON a.student_id = s.id\nJOIN Subjects sub ON a.subject_id = sub.id\nWHERE s.course = 3;
RAG -> SQLStorage: Обращается к БД с запросом
activate SQLStorage
SQLStorage --> RAG: Ответ
deactivate SQLStorage
RAG --> AIAgent: Ответ
AIAgent --> AIOrchestrator: Ответ

AIOrchestrator -> AIOrchestrator: Формирует итоговый ответ
Note right of AIOrchestrator: 1. Студенты: /* Тут результаты запроса к микросервису "Студенты" в формате json */\n2. Касса: /* Тут результаты запроса к микросервису "Касса" в формате json */\n3. Успеваемость: /* Тут результаты запроса к микросервису "Успеваемость" в формате json */\n4. Посещаемость: /* Тут результаты запроса к микросервису "Посещаемость" в формате json */\nСформируй итоговый ответ пользователю без лишнего описания на следующий вопрос:\n«Какая средняя успеваемость и посещаемость студентов третьего курса по всем предметам за последний семестр с задолженностью по оплате»\nНапиши ответ текстом.

Note <<request>> right of Customer: Средняя успеваемость студентов третьего курса по всем предметам\nза последний семестр с задолженностью по оплате составляет X.XX,\nа средняя посещаемость составляет Y.YY%.
AIOrchestrator --> UIChatApp: Ответ
deactivate AIOrchestrator
UIChatApp --> Customer: Ответ
deactivate UIChatApp
deactivate Customer

@enduml
